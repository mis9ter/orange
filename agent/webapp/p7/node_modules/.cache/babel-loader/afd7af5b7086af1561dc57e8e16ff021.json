{"remainingRequest":"C:\\WORK\\orange\\agent\\webapp\\p7\\node_modules\\thread-loader\\dist\\cjs.js!C:\\WORK\\orange\\agent\\webapp\\p7\\node_modules\\babel-loader\\lib\\index.js!C:\\WORK\\orange\\agent\\webapp\\p7\\node_modules\\vuetify\\lib\\components\\VCalendar\\modes\\common.js","dependencies":[{"path":"C:\\WORK\\orange\\agent\\webapp\\p7\\node_modules\\vuetify\\lib\\components\\VCalendar\\modes\\common.js","mtime":499162500000},{"path":"C:\\WORK\\orange\\agent\\webapp\\p7\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WORK\\orange\\agent\\webapp\\p7\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WORK\\orange\\agent\\webapp\\p7\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIkM6L1dPUksvb3JhbmdlL2FnZW50L3dlYmFwcC9wNy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgeyBnZXRUaW1lc3RhbXBJZGVudGlmaWVyIH0gZnJvbSAnLi4vdXRpbC90aW1lc3RhbXAnOwp2YXIgTUlMTElTX0lOX0RBWSA9IDg2NDAwMDAwOwoKZnVuY3Rpb24gX2dldFZpc3VhbHMoZXZlbnRzKSB7CiAgdmFyIG1pblN0YXJ0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwOwogIHZhciB2aXN1YWxzID0gZXZlbnRzLm1hcChmdW5jdGlvbiAoZXZlbnQpIHsKICAgIHJldHVybiB7CiAgICAgIGV2ZW50OiBldmVudCwKICAgICAgY29sdW1uQ291bnQ6IDAsCiAgICAgIGNvbHVtbjogMCwKICAgICAgbGVmdDogMCwKICAgICAgd2lkdGg6IDEwMAogICAgfTsKICB9KTsKICB2aXN1YWxzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgIHJldHVybiBNYXRoLm1heChtaW5TdGFydCwgYS5ldmVudC5zdGFydFRpbWVzdGFtcElkZW50aWZpZXIpIC0gTWF0aC5tYXgobWluU3RhcnQsIGIuZXZlbnQuc3RhcnRUaW1lc3RhbXBJZGVudGlmaWVyKSB8fCBiLmV2ZW50LmVuZFRpbWVzdGFtcElkZW50aWZpZXIgLSBhLmV2ZW50LmVuZFRpbWVzdGFtcElkZW50aWZpZXI7CiAgfSk7CiAgcmV0dXJuIHZpc3VhbHM7Cn0KCmV4cG9ydCB7IF9nZXRWaXN1YWxzIGFzIGdldFZpc3VhbHMgfTsKZXhwb3J0IGZ1bmN0aW9uIGhhc092ZXJsYXAoczAsIGUwLCBzMSwgZTEpIHsKICB2YXIgZXhjbHVkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogdHJ1ZTsKICByZXR1cm4gZXhjbHVkZSA/ICEoczAgPj0gZTEgfHwgZTAgPD0gczEpIDogIShzMCA+IGUxIHx8IGUwIDwgczEpOwp9CmV4cG9ydCBmdW5jdGlvbiBzZXRDb2x1bW5Db3VudChncm91cHMpIHsKICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHsKICAgIGdyb3VwLnZpc3VhbHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXBWaXN1YWwpIHsKICAgICAgZ3JvdXBWaXN1YWwuY29sdW1uQ291bnQgPSBncm91cHMubGVuZ3RoOwogICAgfSk7CiAgfSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmdlKGV2ZW50KSB7CiAgcmV0dXJuIFtldmVudC5zdGFydFRpbWVzdGFtcElkZW50aWZpZXIsIGV2ZW50LmVuZFRpbWVzdGFtcElkZW50aWZpZXJdOwp9CmV4cG9ydCBmdW5jdGlvbiBnZXREYXlSYW5nZShldmVudCkgewogIHJldHVybiBbZXZlbnQuc3RhcnRJZGVudGlmaWVyLCBldmVudC5lbmRJZGVudGlmaWVyXTsKfQpleHBvcnQgZnVuY3Rpb24gZ2V0Tm9ybWFsaXplZFJhbmdlKGV2ZW50LCBkYXlTdGFydCkgewogIHJldHVybiBbTWF0aC5tYXgoZGF5U3RhcnQsIGV2ZW50LnN0YXJ0VGltZXN0YW1wSWRlbnRpZmllciksIE1hdGgubWluKGRheVN0YXJ0ICsgTUlMTElTX0lOX0RBWSwgZXZlbnQuZW5kVGltZXN0YW1wSWRlbnRpZmllcildOwp9CmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVuR3JvdXAoZ3JvdXBzLCBzdGFydCwgZW5kLCB0aW1lZCkgewogIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZ3JvdXAgPSBncm91cHNbaV07CiAgICB2YXIgaW50ZXJzZWN0ZWQgPSBmYWxzZTsKCiAgICBpZiAoaGFzT3ZlcmxhcChzdGFydCwgZW5kLCBncm91cC5zdGFydCwgZ3JvdXAuZW5kLCB0aW1lZCkpIHsKICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBncm91cC52aXN1YWxzLmxlbmd0aDsgaysrKSB7CiAgICAgICAgdmFyIGdyb3VwVmlzdWFsID0gZ3JvdXAudmlzdWFsc1trXTsKCiAgICAgICAgdmFyIF9yZWYgPSB0aW1lZCA/IGdldFJhbmdlKGdyb3VwVmlzdWFsLmV2ZW50KSA6IGdldERheVJhbmdlKGdyb3VwVmlzdWFsLmV2ZW50KSwKICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSwKICAgICAgICAgICAgZ3JvdXBTdGFydCA9IF9yZWYyWzBdLAogICAgICAgICAgICBncm91cEVuZCA9IF9yZWYyWzFdOwoKICAgICAgICBpZiAoaGFzT3ZlcmxhcChzdGFydCwgZW5kLCBncm91cFN0YXJ0LCBncm91cEVuZCwgdGltZWQpKSB7CiAgICAgICAgICBpbnRlcnNlY3RlZCA9IHRydWU7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZiAoIWludGVyc2VjdGVkKSB7CiAgICAgIHJldHVybiBpOwogICAgfQogIH0KCiAgcmV0dXJuIC0xOwp9CmV4cG9ydCBmdW5jdGlvbiBnZXRPdmVybGFwR3JvdXBIYW5kbGVyKGZpcnN0V2Vla2RheSkgewogIHZhciBoYW5kbGVyID0gewogICAgZ3JvdXBzOiBbXSwKICAgIG1pbjogLTEsCiAgICBtYXg6IC0xLAogICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkgewogICAgICBoYW5kbGVyLmdyb3VwcyA9IFtdOwogICAgICBoYW5kbGVyLm1pbiA9IGhhbmRsZXIubWF4ID0gLTE7CiAgICB9LAogICAgZ2V0VmlzdWFsczogZnVuY3Rpb24gZ2V0VmlzdWFscyhkYXksIGRheUV2ZW50cywgdGltZWQpIHsKICAgICAgdmFyIHJlc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTsKCiAgICAgIGlmIChkYXkud2Vla2RheSA9PT0gZmlyc3RXZWVrZGF5IHx8IHJlc2V0KSB7CiAgICAgICAgaGFuZGxlci5yZXNldCgpOwogICAgICB9CgogICAgICB2YXIgZGF5U3RhcnQgPSBnZXRUaW1lc3RhbXBJZGVudGlmaWVyKGRheSk7CgogICAgICB2YXIgdmlzdWFscyA9IF9nZXRWaXN1YWxzKGRheUV2ZW50cywgZGF5U3RhcnQpOwoKICAgICAgdmlzdWFscy5mb3JFYWNoKGZ1bmN0aW9uICh2aXN1YWwpIHsKICAgICAgICB2YXIgX3JlZjMgPSB0aW1lZCA/IGdldFJhbmdlKHZpc3VhbC5ldmVudCkgOiBnZXREYXlSYW5nZSh2aXN1YWwuZXZlbnQpLAogICAgICAgICAgICBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKSwKICAgICAgICAgICAgc3RhcnQgPSBfcmVmNFswXSwKICAgICAgICAgICAgZW5kID0gX3JlZjRbMV07CgogICAgICAgIGlmIChoYW5kbGVyLmdyb3Vwcy5sZW5ndGggPiAwICYmICFoYXNPdmVybGFwKHN0YXJ0LCBlbmQsIGhhbmRsZXIubWluLCBoYW5kbGVyLm1heCwgdGltZWQpKSB7CiAgICAgICAgICBzZXRDb2x1bW5Db3VudChoYW5kbGVyLmdyb3Vwcyk7CiAgICAgICAgICBoYW5kbGVyLnJlc2V0KCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgdGFyZ2V0R3JvdXAgPSBnZXRPcGVuR3JvdXAoaGFuZGxlci5ncm91cHMsIHN0YXJ0LCBlbmQsIHRpbWVkKTsKCiAgICAgICAgaWYgKHRhcmdldEdyb3VwID09PSAtMSkgewogICAgICAgICAgdGFyZ2V0R3JvdXAgPSBoYW5kbGVyLmdyb3Vwcy5sZW5ndGg7CiAgICAgICAgICBoYW5kbGVyLmdyb3Vwcy5wdXNoKHsKICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LAogICAgICAgICAgICBlbmQ6IGVuZCwKICAgICAgICAgICAgdmlzdWFsczogW10KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgdmFyIHRhcmdldCA9IGhhbmRsZXIuZ3JvdXBzW3RhcmdldEdyb3VwXTsKICAgICAgICB0YXJnZXQudmlzdWFscy5wdXNoKHZpc3VhbCk7CiAgICAgICAgdGFyZ2V0LnN0YXJ0ID0gTWF0aC5taW4odGFyZ2V0LnN0YXJ0LCBzdGFydCk7CiAgICAgICAgdGFyZ2V0LmVuZCA9IE1hdGgubWF4KHRhcmdldC5lbmQsIGVuZCk7CiAgICAgICAgdmlzdWFsLmNvbHVtbiA9IHRhcmdldEdyb3VwOwoKICAgICAgICBpZiAoaGFuZGxlci5taW4gPT09IC0xKSB7CiAgICAgICAgICBoYW5kbGVyLm1pbiA9IHN0YXJ0OwogICAgICAgICAgaGFuZGxlci5tYXggPSBlbmQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGhhbmRsZXIubWluID0gTWF0aC5taW4oaGFuZGxlci5taW4sIHN0YXJ0KTsKICAgICAgICAgIGhhbmRsZXIubWF4ID0gTWF0aC5tYXgoaGFuZGxlci5tYXgsIGVuZCk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgc2V0Q29sdW1uQ291bnQoaGFuZGxlci5ncm91cHMpOwoKICAgICAgaWYgKHRpbWVkKSB7CiAgICAgICAgaGFuZGxlci5yZXNldCgpOwogICAgICB9CgogICAgICByZXR1cm4gdmlzdWFsczsKICAgIH0KICB9OwogIHJldHVybiBoYW5kbGVyOwp9"},{"version":3,"sources":["../../../../src/components/VCalendar/modes/common.ts"],"names":[],"mappings":"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","sourcesContent":["import { CalendarEventParsed, CalendarEventVisual, CalendarTimestamp } from 'vuetify/types'\nimport { getTimestampIdentifier } from '../util/timestamp'\n\nconst MILLIS_IN_DAY = 86400000\n\nexport type GetRange = (event: CalendarEventParsed) => [number, number]\n\nexport function getVisuals (events: CalendarEventParsed[], minStart = 0): CalendarEventVisual[] {\n  const visuals = events.map(event => ({\n    event,\n    columnCount: 0,\n    column: 0,\n    left: 0,\n    width: 100,\n  }))\n\n  visuals.sort((a, b) => {\n    return (Math.max(minStart, a.event.startTimestampIdentifier) - Math.max(minStart, b.event.startTimestampIdentifier)) ||\n           (b.event.endTimestampIdentifier - a.event.endTimestampIdentifier)\n  })\n\n  return visuals\n}\n\nexport interface ColumnGroup {\n  start: number\n  end: number\n  visuals: CalendarEventVisual[]\n}\n\nexport function hasOverlap (s0: number, e0: number, s1: number, e1: number, exclude = true): boolean {\n  return exclude ? !(s0 >= e1 || e0 <= s1) : !(s0 > e1 || e0 < s1)\n}\n\nexport function setColumnCount (groups: ColumnGroup[]) {\n  groups.forEach(group => {\n    group.visuals.forEach(groupVisual => {\n      groupVisual.columnCount = groups.length\n    })\n  })\n}\n\nexport function getRange (event: CalendarEventParsed): [number, number] {\n  return [event.startTimestampIdentifier, event.endTimestampIdentifier]\n}\n\nexport function getDayRange (event: CalendarEventParsed): [number, number] {\n  return [event.startIdentifier, event.endIdentifier]\n}\n\nexport function getNormalizedRange (event: CalendarEventParsed, dayStart: number): [number, number] {\n  return [Math.max(dayStart, event.startTimestampIdentifier), Math.min(dayStart + MILLIS_IN_DAY, event.endTimestampIdentifier)]\n}\n\nexport function getOpenGroup (groups: ColumnGroup[], start: number, end: number, timed: boolean) {\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i]\n    let intersected = false\n\n    if (hasOverlap(start, end, group.start, group.end, timed)) {\n      for (let k = 0; k < group.visuals.length; k++) {\n        const groupVisual = group.visuals[k]\n        const [groupStart, groupEnd] = timed ? getRange(groupVisual.event) : getDayRange(groupVisual.event)\n\n        if (hasOverlap(start, end, groupStart, groupEnd, timed)) {\n          intersected = true\n          break\n        }\n      }\n    }\n\n    if (!intersected) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nexport function getOverlapGroupHandler (firstWeekday: number) {\n  const handler = {\n    groups: [] as ColumnGroup[],\n    min: -1,\n    max: -1,\n    reset: () => {\n      handler.groups = []\n      handler.min = handler.max = -1\n    },\n    getVisuals: (day: CalendarTimestamp, dayEvents: CalendarEventParsed[], timed: boolean, reset = false) => {\n      if (day.weekday === firstWeekday || reset) {\n        handler.reset()\n      }\n\n      const dayStart = getTimestampIdentifier(day)\n      const visuals = getVisuals(dayEvents, dayStart)\n\n      visuals.forEach(visual => {\n        const [start, end] = timed ? getRange(visual.event) : getDayRange(visual.event)\n\n        if (handler.groups.length > 0 && !hasOverlap(start, end, handler.min, handler.max, timed)) {\n          setColumnCount(handler.groups)\n          handler.reset()\n        }\n\n        let targetGroup = getOpenGroup(handler.groups, start, end, timed)\n\n        if (targetGroup === -1) {\n          targetGroup = handler.groups.length\n\n          handler.groups.push({ start, end, visuals: [] })\n        }\n\n        const target = handler.groups[targetGroup]\n        target.visuals.push(visual)\n        target.start = Math.min(target.start, start)\n        target.end = Math.max(target.end, end)\n\n        visual.column = targetGroup\n\n        if (handler.min === -1) {\n          handler.min = start\n          handler.max = end\n        } else {\n          handler.min = Math.min(handler.min, start)\n          handler.max = Math.max(handler.max, end)\n        }\n      })\n\n      setColumnCount(handler.groups)\n\n      if (timed) {\n        handler.reset()\n      }\n\n      return visuals\n    },\n  }\n\n  return handler\n}\n"],"sourceRoot":""}]}